############# Синтаксис создания декоратора с параметрами ###################

"""
Декоратор с параметрами decorator_with_args — это внешняя функция,
которая принимает аргументы для декоратора arg1 и arg2.
Возвращает внутренний декоратор my_decorator.

Декоратор my_decorator — принимает функцию func, которую необходимо декорировать.
Возвращает функцию-обертку wrapper.

Функция-обертка wrapper — может принимать произвольные позиционные *args и именованные **kwargs
аргументы, чтобы поддерживать любые функции.
Включает дополнительное поведение до и после вызова func.
"""

def decorator_with_args(arg1, arg2):
    def my_decorator(func):
        def wrapper(*args, **kwargs):
            print(f"Аргументы декоратора: {arg1}, {arg2}")
            result = func(*args, **kwargs)
            print("После выполнения функции")
            return result
        return wrapper
    return my_decorator


################# Синтаксис применения декоратора с параметрами #####################

"""
Рассмотрим, как работает вызов декоратора с параметрами:

Когда декоратор применяется, сначала вызывается 
decorator_with_args с параметрами декоратора.
Затем decorator_with_args возвращает декоратор my_decorator.
my_decorator применяется к функции my_function.
Когда вызывается my_function, 
на самом деле выполняется функция wrapper, 
которая включает в себя функционал, 
расширяющий декорируемую функцию.
"""

@decorator_with_args("значение1", "значение2")
def my_function(x, y):
    print(f"Выполнение функции с аргументами {x} и {y}")

my_function(10, 20)